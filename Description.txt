<----------------------------------------------Creational------------------------------------------------->

Фабричный метод (Factory Method) - это паттерн, который определяет интерфейс для создания объектов некоторого 
класса, но непосредственное решение о том, объект какого класса создавать происходит в подклассах. То есть 
паттерн предполагает, что базовый класс делегирует создание объектов классам-наследникам.

Паттерн "Абстрактная фабрика" (Abstract Factory) предоставляет интерфейс для создания семейств взаимосвязанных 
объектов с определенными интерфейсами без указания конкретных типов данных объектов.

Одиночка (Singleton, Синглтон) - порождающий паттерн, который гарантирует, что для определенного класса будет 
создан только один объект, а также предоставит к этому объекту точку доступа.

Паттерн Прототип (Prototype) позволяет создавать объекты на основе уже ранее созданных объектов-прототипов. 
То есть по сути данный паттерн предлагает технику клонирования объектов.

Строитель (Builder) - шаблон проектирования, который инкапсулирует создание объекта и позволяет разделить его
на различные этапы.

<----------------------------------------------Structural------------------------------------------------->

Декоратор (Decorator) представляет структурный шаблон проектирования, который позволяет динамически подключать 
к объекту дополнительную функциональность.

Паттерн Адаптер (Adapter) предназначен для преобразования интерфейса одного класса в интерфейс другого. 
Благодаря реализации данного паттерна мы можем использовать вместе классы с несовместимыми интерфейсами.

Фасад (Facade) представляет шаблон проектирования, который позволяет скрыть сложность системы с помощью 
предоставления упрощенного интерфейса для взаимодействия с ней.

Паттерн Заместитель (Proxy) предоставляет объект-заместитель, который управляет доступом к другому объекту. 
То есть создается объект-суррогат, который может выступать в роли другого объекта и замещать его.

Мост (Bridge) - структурный шаблон проектирования, который позволяет отделить абстракцию от реализации таким 
образом, чтобы и абстракцию, и реализацию можно было изменять независимо друг от друга.

Паттерн Приспособленец (Flyweight) - структурный шаблон проектирования, который позволяет использовать 
разделяемые объекты сразу в нескольких контекстах. Данный паттерн используется преимущественно для оптимизации 
работы с памятью.

<----------------------------------------------Behavioral------------------------------------------------->


Паттерн Стратегия (Strategy) представляет шаблон проектирования, который определяет набор алгоритмов, 
инкапсулирует каждый из них и обеспечивает их взаимозаменяемость.

Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует 
отношение "один ко многим". В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при 
изменении наблюдаемого объекта автоматически происходит оповещение всех наблюдателей.

Паттерн "Команда" (Command) позволяет инкапсулировать запрос на выполнение определенного действия в виде 
отдельного объекта. Этот объект запроса на действие и называется командой. При этом объекты, инициирующие 
запросы на выполнение действия, отделяются от объектов, которые выполняют это действие.

Шаблонный метод (Template Method) определяет общий алгоритм поведения подклассов, позволяя им переопределить 
отдельные шаги этого алгоритма без изменения его структуры.

Паттерн Итератор (Iterator) предоставляет абстрактный интерфейс для последовательного доступа ко всем элементам 
составного объекта без раскрытия его внутренней структуры.

Состояние (State) - шаблон проектирования, который позволяет объекту изменять свое поведение в зависимости 
от внутреннего состояния.

Цепочка Обязанностей (Chain of responsibility) - поведенческий шаблон проектирования, который позволяет 
избежать жесткой привязки отправителя запроса к получателю, позволяя нескольким объектам обработать запрос. 
Все возможные обработчики запроса образуют цепочку, а сам запрос перемещается по этой цепочке, пока один из 
ее объектов не обработает запрос. Каждый объект при получении запроса выбирает, либо обработать запрос, либо 
передать выполнение запроса следующему по цепочке.

Паттерн Интерпретатор (Interpreter) определяет представление грамматики для заданного языка и интерпретатор 
предложений этого языка. Как правило, данный шаблон проектирования применяется для часто повторяющихся операций.

Паттерн Посредник (Mediator) представляет такой шаблон проектирования, который обеспечивает взаимодействие 
множества объектов без необходимости ссылаться друг на друга. Тем самым достигается слабосвязанность 
взаимодействующих объектов.

Паттерн Хранитель (Memento) позволяет выносить внутреннее состояние объекта за его пределы для последующего 
возможного восстановления объекта без нарушения принципа инкапсуляции.

Паттерн Посетитель (Visitor) позволяет определить операцию для объектов других классов без изменения этих 
классов.